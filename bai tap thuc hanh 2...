// bai 1
package stack;
interface Stack{
    public void push(int item);
    public int pop();
}
 
class Arstack implements Stack{
    int stck[];
    int tos;
    ArStack (int size){
        stck = new int[size];
        tos = -1;
    }
    public void push(int item){
        if(pos == stck.length - 1)
           System.out.println("Full ")
        else 
           stck[++tpackage Stack;
interface Stack{
    public void push (int item);
    os] = item;
          
    }
    
    public int pop(){
        if(pos < 0)
           System.out.println("empty");
        else
           return stck[tos --];
           
    }
}

class StackTest{
    public static void main(String[] arg){
        ArStack stack1 = new IntStack(5);
        
        for(int i=1; i<=5; i++){
           stack1.push(i);
        }
        
        System.out.println("Stack1: ");
        for(int i=1; i<=5; i++){
            System.out.println(stack1.pop());
        }
    }
}



// bai 2
public class ArrayStack implements Stack{
    public static final int CAPACITY=1000;
    private int capacity;
    private Object a[];
    private int top=-1;
    public ArrayStack(){
        this(CAPACITY);
    }
    public ArrayStack(int cap){
        capacity=cap;
        a = new Object[capacity];
    }
    public int size(){
        return (top+1);
        
    }
    public boolean isEmpty(){
        return (top<0);
    }
    public void push(Object obj) throws StackFullException{
        if(size()= = capavity)
          throw new StackEmptyException("Stack overflow");
          a [++top] = obj;
    }
    public Object top() throws StackEmptyException{
        if(isEmpty())
          throw new StackEmptyException ("Stack is empty");
        elem = a[top];
        a[top--] = null;
        return elem;
    }
}


// bai 3

public class LinkedStack implements Stack{
    private Node top;
    private int size;
    public LinkedStack(){
        top = null;
        size = 0;
        
    }
    public int size(){
        return size;
    }
    public boolean isEmpty(){
        if(top == null)
          return true;
        else 
          return false;
    }
    public void push(Object elem){
        Node v = new Node();
        v.stElement(elem);
        v.setNext(top);
        top = v;
        size ++;
        
    }
    public Object top() throws StackEmptyException{
        if(isEmpty())
          throw new StackEmptyException("Stack is empty:");
        return top.getElement();
    }
    public Object pop() throws StackEmptyException{
        if(isEmpty())
          throw new StackEmptyException("Stack is empty:");
        Object temp = top.getElement();
        top = top.getNext();
        size--;
        return temp;
    }
}










